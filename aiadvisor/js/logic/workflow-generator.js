// Generic Workflow Generator
// Generates OOUX workflows from detected patterns

function generateWorkflow(concept, patternKey, objects, industry = 'generic', templateSlug = null) {
    // Check for template-specific workflow first
    if (templateSlug && typeof TEMPLATE_WORKFLOWS !== 'undefined' && TEMPLATE_WORKFLOWS[templateSlug]) {
        return TEMPLATE_WORKFLOWS[templateSlug];
    }

    const workflow = {
        objects: [],
        flow: [],
        aiTouchpoints: [],
        configurationNeeds: []
    };

    // Populate objects from detected relevant objects
    objects.forEach(objKey => {
        if (GENERIC_OBJECTS[objKey]) {
            workflow.objects.push({
                ...GENERIC_OBJECTS[objKey],
                key: objKey
            });
        }
    });

    // Generate workflow based on pattern and ensure it has objects
    let generatedWorkflow;
    switch(patternKey) {
        case 'autoApproval':
            generatedWorkflow = generateAutoApprovalWorkflow(concept, objects, industry);
            break;
        case 'anomalyDetection':
            generatedWorkflow = generateAnomalyDetectionWorkflow(concept, objects, industry);
            break;
        case 'intelligentScoring':
            generatedWorkflow = generateIntelligentScoringWorkflow(concept, objects, industry);
            break;
        case 'predictiveIntelligence':
            generatedWorkflow = generatePredictiveIntelligenceWorkflow(concept, objects, industry);
            break;
        case 'unifiedEntityView':
            generatedWorkflow = generateUnifiedEntityViewWorkflow(concept, objects, industry);
            break;
        case 'crossSystemWorkflow':
            generatedWorkflow = generateCrossSystemWorkflowWorkflow(concept, objects, industry);
            break;
        case 'naturalLanguageQA':
            generatedWorkflow = generateNaturalLanguageQAWorkflow(concept, objects, industry);
            break;
        case 'intelligentSearch':
            generatedWorkflow = generateIntelligentSearchWorkflow(concept, objects, industry);
            break;
        case 'impactAnalysis':
            generatedWorkflow = generateImpactAnalysisWorkflow(concept, objects, industry);
            break;
        case 'resourceOptimization':
            generatedWorkflow = generateResourceOptimizationWorkflow(concept, objects, industry);
            break;
        case 'realTimeProcessing':
            generatedWorkflow = generateRealTimeProcessingWorkflow(concept, objects, industry);
            break;
        case 'smartAggregation':
            generatedWorkflow = generateSmartAggregationWorkflow(concept, objects, industry);
            break;
        default:
            generatedWorkflow = generateGenericWorkflow(concept, objects, industry);
    }

    return ensureWorkflowHasObjects(generatedWorkflow, concept);
}

// Wrapper to ensure all workflows have objects
function ensureWorkflowHasObjects(workflow, concept) {
    if (!workflow.objects || workflow.objects.length === 0) {
        // Create basic fallback objects
        workflow.objects = [
            {
                key: 'input',
                name: 'Input Data',
                description: 'Data or request submitted for AI processing',
                coreContent: ['Data Fields', 'Context', 'Timestamp', 'Submitter'],
                metadata: ['Status', 'Priority', 'Source System'],
                actions: ['Submit', 'Edit', 'Cancel', 'Track'],
                relationships: [{ type: 'has-one', target: 'aiResult' }]
            },
            {
                key: 'aiResult',
                name: 'AI Result',
                description: 'Output generated by AI processing',
                coreContent: ['Result', 'Confidence Score', 'Reasoning', 'Alternatives'],
                metadata: ['Generated At', 'Model Version', 'Processing Time'],
                actions: ['View', 'Accept', 'Reject', 'Modify'],
                relationships: [{ type: 'belongs-to', target: 'input' }]
            }
        ];
    }
    return workflow;
}

// Helper: Get domain-specific context
function getDomainContext(industry, pattern) {
    if (industry === 'hcm' && typeof HCM_DOMAIN !== 'undefined' && HCM_DOMAIN.workflowExamples[pattern]) {
        return HCM_DOMAIN.workflowExamples[pattern];
    }
    if (industry === 'finance' && typeof FINANCE_DOMAIN !== 'undefined' && FINANCE_DOMAIN.workflowExamples[pattern]) {
        return FINANCE_DOMAIN.workflowExamples[pattern];
    }
    return null;
}

// Auto-Approval Pattern
function generateAutoApprovalWorkflow(concept, objects, industry = 'generic') {
    // Extract context from concept
    const lower = concept.toLowerCase();
    const domainContext = getDomainContext(industry, 'autoApproval');

    // Use domain-specific context if available
    let requestType, criteria, notification;

    if (industry === 'hcm') {
        requestType = domainContext ? 'PTO request' :
                     (lower.includes('pto') || lower.includes('time off') ? 'PTO request' : 'time-off request');
        criteria = domainContext ? domainContext.criteria : 'balance check, blackout dates, team coverage';
        notification = 'employee';
    } else if (industry === 'finance') {
        requestType = domainContext ? 'loan application' :
                     (lower.includes('loan') ? 'loan application' : 'claim');
        criteria = domainContext ? domainContext.criteria : 'credit score, debt-to-income ratio, loan amount';
        notification = lower.includes('applicant') ? 'applicant' : 'customer';
    } else {
        // Generic fallback
        requestType = lower.includes('pto') || lower.includes('time off') ? 'time-off request' :
                       lower.includes('loan') ? 'loan application' :
                       lower.includes('expense') ? 'expense request' :
                       lower.includes('review') ? 'performance review' :
                       lower.includes('claim') ? 'claim submission' : 'request';

        criteria = lower.includes('coverage') ? 'team coverage and blackout dates' :
                    lower.includes('credit') || lower.includes('risk') ? 'credit score and risk factors' :
                    lower.includes('threshold') || lower.includes('amount') ? 'amount thresholds and business rules' :
                    lower.includes('rating') ? 'rating levels and policy compliance' :
                    'policy rules and risk assessment';

        notification = lower.includes('employee') ? 'employee' :
                        lower.includes('customer') ? 'customer' :
                        lower.includes('applicant') ? 'applicant' : 'requester';
    }

    // Build domain-specific AI touchpoints
    let aiTouchpoints;
    if (industry === 'hcm') {
        aiTouchpoints = [
            'Validates PTO balance and accrual rules',
            'Checks team coverage and staffing requirements',
            'Analyzes blackout dates and business critical periods',
            'Reviews historical approval patterns for similar requests',
            'Assesses impact on department coverage and operations',
            'Considers employee tenure, role criticality, and request history',
            'Calculates auto-approval confidence based on policy compliance',
            'Routes edge cases to manager with full context and recommendation',
            'Learns from manager overrides to refine approval logic'
        ];
    } else if (industry === 'finance') {
        aiTouchpoints = [
            'Validates credit score and income documentation',
            'Analyzes debt-to-income ratio and payment history',
            'Assesses collateral value and loan-to-value ratio',
            'Reviews employment stability and income sources',
            'Evaluates market conditions and risk factors',
            'Compares to approved/denied applications with similar profiles',
            'Calculates default probability and risk score',
            'Routes high-risk applications to senior underwriter',
            'Learns from underwriter decisions to improve scoring accuracy'
        ];
    } else {
        aiTouchpoints = [
            'Validates against policy rules and business constraints',
            'Analyzes historical approval patterns for similar requests',
            'Assesses risk factors (amount, impact, compliance)',
            'Calculates confidence score for auto-approval decision',
            'Considers requester history and reliability',
            'Evaluates business context (timing, capacity, budget)',
            'Routes based on confidence threshold and risk profile',
            'Learns from reviewer corrections to improve accuracy'
        ];
    }

    return {
        objects: objects.map(key => GENERIC_OBJECTS[key]).filter(Boolean),
        flow: [
            { step: 1, actor: 'User', action: `Submits ${requestType}`, object: 'request' },
            { step: 2, actor: 'System', action: 'Validates completeness and eligibility', object: 'request' },
            { step: 3, actor: 'AI', action: `Evaluates against ${criteria}`, object: 'request', confidence: true },
            { step: 4, actor: 'AI', action: 'Calculates risk score and confidence level', object: 'approval', branches: true },
            { step: '4a', actor: 'System', action: 'Auto-approves and updates systems', object: 'approval', condition: 'confidence > threshold AND risk < limit' },
            { step: '4b', actor: 'System', action: 'Routes to manager/reviewer for decision', object: 'approval', condition: 'confidence ≤ threshold OR risk ≥ limit' },
            { step: 5, actor: 'System', action: `Notifies ${notification} of decision with reasoning`, object: 'request' }
        ],
        aiTouchpoints,
        configurationNeeds: [
            { setting: 'Auto-Approval Confidence', description: 'Minimum confidence threshold to auto-approve', default: '90%' },
            { setting: 'Risk Limits', description: 'Maximum acceptable risk scores for auto-approval', default: 'Low for financial, medium for operational' },
            { setting: 'Policy Rules', description: 'Business rules that must be satisfied', default: 'Company-defined policies' },
            { setting: 'Escalation Rules', description: 'When to require additional approval', default: 'High value or high risk items' },
            { setting: 'Review SLA', description: 'Hours before auto-escalation if not reviewed', default: '24 hours' }
        ]
    };
}

// Anomaly Detection Pattern
function generateAnomalyDetectionWorkflow(concept, objects, industry = 'generic') {
    const lower = concept.toLowerCase();
    const domainContext = getDomainContext(industry, 'anomalyDetection');

    let dataType, anomalyType, correctionAction;

    if (industry === 'hcm') {
        dataType = domainContext ? 'time entries' : 'timecards';
        anomalyType = domainContext ? domainContext.detection : 'missing punches and schedule deviations';
        correctionAction = 'Suggests fix based on employee schedule history';
    } else if (industry === 'finance') {
        dataType = domainContext ? 'transactions' : 'transactions';
        anomalyType = domainContext ? domainContext.detection : 'unusual spending patterns, location anomalies, velocity checks';
        correctionAction = 'Flags for fraud investigation and review';
    } else {
        // Generic fallback
        dataType = lower.includes('timecard') || lower.includes('punch') || lower.includes('time') ? 'timecards' :
                        lower.includes('transaction') || lower.includes('fraud') ? 'transactions' :
                        lower.includes('enrollment') || lower.includes('benefit') ? 'enrollment data' :
                        lower.includes('claim') ? 'claims' :
                        lower.includes('inventory') ? 'inventory records' : 'data records';

        anomalyType = lower.includes('missing') || lower.includes('punch') ? 'missing entries and gaps' :
                           lower.includes('fraud') ? 'fraudulent patterns' :
                           lower.includes('error') ? 'data errors and inconsistencies' :
                           lower.includes('discrepanc') ? 'discrepancies' : 'unusual patterns';

        correctionAction = lower.includes('punch') || lower.includes('time') ? 'Suggests fix based on schedule history' :
                                lower.includes('enrollment') ? 'Recommends correction before deadline' :
                                lower.includes('fraud') ? 'Flags for fraud investigation' :
                                'Generates suggested correction based on context';
    }

    // Build domain-specific AI touchpoints and flows
    let aiTouchpoints, flow;

    // Employee timecard acknowledgment workflow
    if (lower.includes('timecard') && (lower.includes('acknowledge') || lower.includes('review') || lower.includes('unusual'))) {
        aiTouchpoints = [
            'Compares employee timecard to scheduled hours and patterns',
            'Detects unusual variance (excessive hours, missing breaks)',
            'Identifies pattern breaks from employee normal behavior',
            'Flags potential policy violations or data entry errors',
            'Generates suggested explanations based on context',
            'Assesses severity and payroll impact of anomalies',
            'Routes to employee for review before payroll lock',
            'Learns from employee confirmations to reduce false flags'
        ];
        flow = [
            { step: 1, actor: 'System', action: 'Monitors timecards approaching payroll cutoff', object: 'timeEntry' },
            { step: 2, actor: 'AI', action: 'Analyzes each timecard for unusual patterns', object: 'timeEntry', confidence: true },
            { step: 3, actor: 'AI', action: `Detects ${anomalyType} using pattern analysis`, object: 'anomaly', confidence: true },
            { step: 4, actor: 'AI', action: 'Flags unusual timecards for employee review', object: 'anomaly' },
            { step: 5, actor: 'System', action: 'Routes based on anomaly severity', object: 'anomaly', branches: true },
            { step: '5a', actor: 'System', action: 'Sends mobile notification: "Review your timecard before payroll"', object: 'anomaly', condition: 'medium severity - needs review' },
            { step: '5b', actor: 'System', action: 'Blocks timecard and alerts manager for approval', object: 'anomaly', condition: 'high severity - policy violation' },
            { step: 6, actor: 'Employee', action: 'Views timecard with flagged anomalies highlighted', object: 'timeEntry' },
            { step: 7, actor: 'Employee', action: 'Reviews flagged items and takes action', object: 'timeEntry', branches: true },
            { step: '7a', actor: 'Employee', action: 'Confirms timecard is accurate, adds explanation if needed', object: 'timeEntry', condition: 'timecard correct' },
            { step: '7b', actor: 'Employee', action: 'Corrects errors and resubmits timecard', object: 'timeEntry', condition: 'found errors' },
            { step: 8, actor: 'System', action: 'Locks acknowledged timecard for payroll processing', object: 'timeEntry' },
            { step: 9, actor: 'AI', action: 'Learns from employee responses to refine anomaly detection', object: 'anomaly' }
        ];
    } else if (industry === 'hcm') {
        // Generic HCM anomaly detection (missing punches, etc.)
        aiTouchpoints = [
            'Compares clock-in/out times to employee schedule and shift patterns',
            'Identifies missing punches, late arrivals, early departures',
            'Detects unusual overtime hours or consecutive shifts',
            'Analyzes meal break compliance and rest period violations',
            'Generates suggested corrections based on historical patterns',
            'Assesses impact on payroll and labor compliance',
            'Flags potential time theft or policy violations',
            'Learns from manager corrections to reduce false positives',
            'Adapts to seasonal patterns and schedule changes'
        ];
        flow = null; // Use default flow
    } else if (industry === 'finance') {
        aiTouchpoints = [
            'Monitors transaction patterns for unusual spending behavior',
            'Detects location anomalies and impossible transaction sequences',
            'Analyzes velocity patterns (frequency, amount, timing)',
            'Identifies merchant category deviations from normal behavior',
            'Compares to known fraud patterns and risk indicators',
            'Calculates fraud probability score with confidence level',
            'Blocks high-risk transactions and alerts customer',
            'Learns from confirmed fraud and false positive feedback',
            'Adapts to customer life events and legitimate pattern changes'
        ];
    } else {
        aiTouchpoints = [
            'Compares current data to historical baselines and patterns',
            'Identifies statistical outliers and unusual deviations',
            'Analyzes context to distinguish anomalies from valid variations',
            'Generates suggested corrections based on similar cases',
            'Assesses severity and potential impact of anomaly',
            'Provides explanation of what makes this anomalous',
            'Learns from user corrections to reduce false positives',
            'Adapts detection sensitivity based on feedback'
        ];
    }

    // Use custom flow if generated, otherwise use default
    const defaultFlow = [
        { step: 1, actor: 'System', action: `Continuously monitors ${dataType}`, object: 'transaction' },
        { step: 2, actor: 'AI', action: `Detects ${anomalyType} using pattern analysis`, object: 'transaction', confidence: true },
        { step: 3, actor: 'AI', action: correctionAction, object: 'anomaly' },
        { step: 4, actor: 'System', action: 'Creates anomaly record with context and severity', object: 'anomaly' },
        { step: 5, actor: 'System', action: 'Routes based on severity and confidence', object: 'anomaly', branches: true },
        { step: '5a', actor: 'System', action: 'Auto-corrects and logs change', object: 'transaction', condition: 'confidence > 95% AND low impact' },
        { step: '5b', actor: 'System', action: 'Flags for manager/admin review', object: 'anomaly', condition: 'medium severity' },
        { step: '5c', actor: 'System', action: 'Alerts stakeholders and blocks processing', object: 'anomaly', condition: 'high severity' },
        { step: 6, actor: 'User', action: 'Reviews details and resolves or overrides', object: 'anomaly' }
    ];

    return {
        objects: objects.map(key => GENERIC_OBJECTS[key]).filter(Boolean),
        flow: flow || defaultFlow,
        aiTouchpoints,
        configurationNeeds: [
            { setting: 'Detection Threshold', description: 'Sensitivity for flagging anomalies', default: 'Medium - balance false positives vs. misses' },
            { setting: 'Confidence Threshold', description: 'Minimum confidence to auto-correct', default: '95%' },
            { setting: 'Historical Lookback', description: 'Time period for baseline comparison', default: '90 days' },
            { setting: 'Severity Levels', description: 'Thresholds for low/medium/high severity', default: 'Impact-based classification' },
            { setting: 'Auto-Correction Rules', description: 'What AI can fix automatically', default: 'Low-impact, high-confidence only' }
        ]
    };
}

// Intelligent Scoring Pattern
function generateIntelligentScoringWorkflow(concept, objects, industry = 'generic') {
    const lower = concept.toLowerCase();
    const domainContext = getDomainContext(industry, 'intelligentScoring');

    let itemType, scoreFactors, lowAction, highAction;

    if (industry === 'hcm') {
        itemType = domainContext ? domainContext.entity : 'timecards';
        scoreFactors = domainContext ? domainContext.factors : 'time variance, overtime, policy violations, pattern breaks';
        lowAction = 'Auto-processes to payroll';
        highAction = 'Blocks and alerts manager for review';
    } else if (industry === 'finance') {
        itemType = domainContext ? domainContext.entity : 'credit applications';
        scoreFactors = domainContext ? domainContext.factors : 'credit history, income stability, debt ratios, market conditions';
        lowAction = 'Auto-approves application';
        highAction = 'Declines or routes to senior underwriter';
    } else {
        // Generic fallback
        itemType = lower.includes('shift') && (lower.includes('swap') || lower.includes('match')) ? 'shift swap requests' :
                        lower.includes('timecard') ? 'timecards' :
                        lower.includes('candidate') || lower.includes('applicant') ? 'job candidates' :
                        lower.includes('credit') || lower.includes('loan') ? 'credit applications' :
                        lower.includes('risk') || lower.includes('patient') ? 'risk profiles' :
                        lower.includes('return') ? 'return requests' : 'items';

        scoreFactors = lower.includes('shift') && (lower.includes('swap') || lower.includes('match')) ? 'skills match, availability overlap, certification requirements, location proximity, preference alignment' :
                            lower.includes('timecard') ? 'variance, patterns, anomalies, policy compliance' :
                            lower.includes('candidate') ? 'skills match, experience, qualifications' :
                            lower.includes('credit') ? 'credit history, income, debt ratio, collateral' :
                            lower.includes('risk') ? 'historical data, behavioral patterns, external factors' :
                            'configurable risk and quality factors';

        lowAction = lower.includes('shift') && (lower.includes('swap') || lower.includes('match')) ? 'Shows as poor match with explanation' :
                         lower.includes('credit') ? 'Auto-approves application' :
                         lower.includes('candidate') ? 'Routes to hiring manager' :
                         lower.includes('timecard') ? 'Auto-processes to payroll' : 'Auto-processes';

        highAction = lower.includes('shift') && (lower.includes('swap') || lower.includes('match')) ? 'Suggests as best match with manager notification if needed' :
                          lower.includes('fraud') || lower.includes('return') ? 'Blocks and flags for fraud review' :
                          lower.includes('credit') ? 'Declines application with explanation' :
                          lower.includes('timecard') ? 'Blocks and alerts manager' : 'Escalates for senior review';
    }

    // Build domain-specific AI touchpoints and flows
    let aiTouchpoints, flow;

    // Employee shift swap matching workflow
    if (lower.includes('shift') && (lower.includes('swap') || lower.includes('match'))) {
        aiTouchpoints = [
            'Retrieves Employee object: role, skills, certifications, department, location',
            'Retrieves Shift object: date, time range, location, role requirements, break rules',
            'Queries all Employee objects matching role and certification requirements',
            'For each candidate Employee: retrieves Schedule object to check availability conflicts',
            'Calculates proximity score using Employee.location and Shift.location',
            'Analyzes historical shiftSwapRequest objects to identify preference patterns',
            'Creates Match Score metadata for each Employee-Shift pairing',
            'Generates ranked list of shiftSwapRequest objects with Match Score and explanation',
            'Learns from shiftSwapRequest.status outcomes to refine Match Score algorithm'
        ];
        flow = [
            { step: 1, actor: 'Employee', action: 'Creates shiftSwapRequest via mobile app', object: 'shiftSwapRequest', objectAction: 'create' },
            { step: 2, actor: 'System', action: 'Validates Shift object and Employee eligibility', object: 'shift', objectAction: 'read' },
            { step: 3, actor: 'AI', action: 'Queries Employee objects matching Shift.roleRequirements', object: 'employee', confidence: true, objectAction: 'read' },
            { step: 4, actor: 'AI', action: `Calculates Match Score for each Employee: ${scoreFactors}`, object: 'shiftSwapRequest', confidence: true, objectAction: 'update' },
            { step: 5, actor: 'AI', action: 'Ranks Employee objects by Match Score with explanation metadata', object: 'employee', objectAction: 'read' },
            { step: 6, actor: 'System', action: 'Routes shiftSwapRequest based on Match Score threshold', object: 'shiftSwapRequest', branches: true, objectAction: 'update' },
            { step: '6a', actor: 'System', action: 'Displays top 5 Employee matches with Match Score details', object: 'employee', condition: 'Match Score > threshold', objectAction: 'read' },
            { step: '6b', actor: 'System', action: 'Notifies Manager: no qualified matches, coverage needed', object: 'shiftSwapRequest', condition: 'Match Score < threshold', objectAction: 'update' },
            { step: 7, actor: 'Employee', action: 'Reviews Employee matches and sends shiftSwapRequest to preferred Employee', object: 'shiftSwapRequest', objectAction: 'update' },
            { step: 8, actor: 'Employee', action: 'Target Employee updates shiftSwapRequest.status (accept/decline)', object: 'shiftSwapRequest', branches: true, objectAction: 'update' },
            { step: '8a', actor: 'System', action: 'Updates Schedule objects for both Employee objects', object: 'schedule', condition: 'status = accepted', objectAction: 'update' },
            { step: '8b', actor: 'Employee', action: 'Selects next ranked Employee from match list', object: 'shiftSwapRequest', condition: 'status = declined', objectAction: 'update' },
            { step: 9, actor: 'AI', action: 'Updates Match Score algorithm using shiftSwapRequest outcome data', object: 'shiftSwapRequest', objectAction: 'read' }
        ];
    } else if (industry === 'hcm') {
        // Generic HCM scoring (timecard scoring, etc.)
        aiTouchpoints = [
            'Calculates timecard risk score across multiple dimensions',
            'Analyzes time variance from scheduled hours',
            'Detects excessive overtime and consecutive work days',
            'Identifies pattern breaks from normal employee behavior',
            'Checks policy compliance (breaks, shifts, pay codes)',
            'Compares to department and peer group benchmarks',
            'Generates insights by category (cost, compliance, fraud risk)',
            'Routes high-risk items for manager review before payroll',
            'Learns optimal scoring weights from manager feedback'
        ];
        flow = null; // Use default flow
    } else if (industry === 'finance') {
        aiTouchpoints = [
            'Calculates credit risk score using multiple data sources',
            'Analyzes credit history, payment patterns, and utilization',
            'Evaluates income stability and debt-to-income ratios',
            'Assesses collateral value and loan-to-value ratios',
            'Incorporates market conditions and economic indicators',
            'Compares to similar approved/denied applications',
            'Generates default probability and expected loss estimates',
            'Routes applications to appropriate approval tier',
            'Learns from underwriter decisions to refine scoring model'
        ];
    } else {
        aiTouchpoints = [
            'Calculates weighted scores across configurable factors',
            'Factors may include: variance, compliance, patterns, history',
            'Generates categorized insights (cost risk, compliance, quality)',
            'Provides drill-down details for each score component',
            'Compares scores to peer benchmarks and thresholds',
            'Learns optimal weights from historical outcomes',
            'Adapts scoring based on changing business conditions'
        ];
    }

    // Use custom flow if generated, otherwise use default
    const defaultFlow = [
        { step: 1, actor: 'System', action: `Receives ${itemType} for risk scoring`, object: 'transaction' },
        { step: 2, actor: 'AI', action: `Calculates weighted score across: ${scoreFactors}`, object: 'transaction', confidence: true },
        { step: 3, actor: 'AI', action: 'Generates detailed breakdown and insight summary', object: 'insight' },
        { step: 4, actor: 'System', action: 'Routes based on risk score and confidence', object: 'transaction', branches: true },
        { step: '4a', actor: 'System', action: lowAction, object: 'transaction', condition: 'score < low threshold' },
        { step: '4b', actor: 'System', action: 'Flags for manager/reviewer with score details', object: 'insight', condition: 'low ≤ score < high' },
        { step: '4c', actor: 'System', action: highAction, object: 'insight', condition: 'score ≥ high threshold' },
        { step: 5, actor: 'System', action: 'Updates dashboard with scoring trends and insights', object: 'insight' }
    ];

    return {
        objects: objects.map(key => GENERIC_OBJECTS[key]).filter(Boolean),
        flow: flow || defaultFlow,
        aiTouchpoints,
        configurationNeeds: [
            { setting: 'Score Weights', description: 'Weight for each scoring factor', default: 'Balanced across all factors' },
            { setting: 'Low Threshold', description: 'Score below which to auto-process', default: '20 points' },
            { setting: 'High Threshold', description: 'Score above which to block/escalate', default: '80 points' },
            { setting: 'Insight Categories', description: 'Types of insights to generate', default: 'All (cost, compliance, quality)' },
            { setting: 'Output Format', description: 'How to present scores and insights', default: 'Dashboard + email digest' }
        ]
    };
}

// Predictive Intelligence Pattern
function generatePredictiveIntelligenceWorkflow(concept, objects, industry = 'generic') {
    const lower = concept.toLowerCase();
    const domainContext = getDomainContext(industry, 'predictiveIntelligence');

    let predictionType, recommendations, criticalTrigger;

    if (industry === 'hcm') {
        predictionType = domainContext ? 'employee turnover risk' : 'employee turnover risk';
        recommendations = domainContext ? 'Suggests targeted retention actions (compensation, development, engagement)' :
                         'Recommends staffing adjustments and scheduling changes';
        criticalTrigger = 'High-value employee at >70% flight risk';
    } else if (industry === 'finance') {
        predictionType = domainContext ? 'credit risk and default probability' : 'credit risk and default probability';
        recommendations = domainContext ? domainContext.insights :
                         'Proposes portfolio adjustments and hedging strategies';
        criticalTrigger = 'Portfolio risk spike or concentration risk detected';
    } else {
        // Generic fallback
        predictionType = lower.includes('turnover') || lower.includes('attrition') ? 'employee turnover risk' :
                              lower.includes('overtime') ? 'overtime trends and costs' :
                              lower.includes('clock') || lower.includes('reminder') ? 'missed clock-in/out events' :
                              lower.includes('pto') && lower.includes('balance') ? 'future PTO accrual and availability' :
                              lower.includes('schedule') && lower.includes('prefer') ? 'preferred shift availability' :
                              lower.includes('credit') || lower.includes('risk') ? 'credit risk and default probability' :
                              lower.includes('readmission') || lower.includes('patient') ? 'patient readmission risk' :
                              lower.includes('stockout') || lower.includes('inventory') ? 'inventory stockout probability' :
                              'future outcomes and risks';

        recommendations = lower.includes('turnover') ? 'Suggests targeted retention actions (comp, development, engagement)' :
                               lower.includes('overtime') ? 'Recommends staffing adjustments and scheduling changes' :
                               lower.includes('clock') || lower.includes('reminder') ? 'Sends proactive reminders based on schedule and location patterns' :
                               lower.includes('pto') && lower.includes('balance') ? 'Shows projected accrual dates and available balance forecasts' :
                               lower.includes('schedule') && lower.includes('prefer') ? 'Suggests available shifts matching learned preferences' :
                               lower.includes('credit') ? 'Proposes portfolio adjustments and hedging strategies' :
                               lower.includes('patient') ? 'Plans preventive care interventions and follow-ups' :
                               lower.includes('inventory') ? 'Optimizes reordering and allocation across locations' :
                               'Generates actionable recommendations with expected impact';

        criticalTrigger = lower.includes('turnover') ? 'High-value employee at >70% flight risk' :
                               lower.includes('overtime') ? 'Projected to exceed budget by >15%' :
                               lower.includes('clock') || lower.includes('reminder') ? 'Employee approaching shift start without clock-in' :
                               lower.includes('pto') ? 'Approaching PTO policy deadline or expiration' :
                               lower.includes('schedule') ? 'Preferred shift becoming unavailable soon' :
                               lower.includes('credit') ? 'Portfolio risk spike detected' :
                               lower.includes('patient') ? '90-day readmission risk >50%' :
                               'Critical threshold exceeded';
    }

    // Build domain-specific AI touchpoints and flows
    let aiTouchpoints, flow;

    // Employee-specific Time & Attendance workflows
    if (lower.includes('clock') || lower.includes('reminder')) {
        aiTouchpoints = [
            'Learns employee clock-in/out patterns and typical schedules',
            'Monitors employee location and proximity to work site',
            'Detects when employee approaches scheduled shift time',
            'Predicts likelihood of missed clock-in based on behavior patterns',
            'Sends proactive reminders via mobile push, SMS, or email',
            'Adapts reminder timing based on employee response patterns',
            'Reduces missed punches and time entry corrections',
            'Tracks reminder effectiveness to optimize delivery timing'
        ];
        flow = [
            { step: 1, actor: 'System', action: 'Monitors employee schedule and location data continuously', object: 'schedule' },
            { step: 2, actor: 'AI', action: 'Learns employee clock-in patterns and typical arrival times', object: 'clockEvent', confidence: true },
            { step: 3, actor: 'AI', action: 'Detects employee approaching shift start time', object: 'schedule' },
            { step: 4, actor: 'AI', action: 'Predicts missed clock-in risk based on location and patterns', object: 'clockEvent', confidence: true },
            { step: 5, actor: 'System', action: 'Routes reminder based on urgency and risk', object: 'clockEvent', branches: true },
            { step: '5a', actor: 'System', action: 'Sends mobile push notification reminder to clock in', object: 'clockEvent', condition: 'high risk, shift starting soon' },
            { step: '5b', actor: 'System', action: 'Sends gentle SMS reminder 15 minutes before shift', object: 'clockEvent', condition: 'medium risk' },
            { step: '5c', actor: 'System', action: 'No reminder needed - employee has consistent patterns', object: 'clockEvent', condition: 'low risk' },
            { step: 6, actor: 'Employee', action: 'Receives reminder and clocks in via mobile or kiosk', object: 'clockEvent' },
            { step: 7, actor: 'System', action: 'Records clock event and updates timecard', object: 'timeEntry' },
            { step: 8, actor: 'AI', action: 'Learns from employee response to refine future reminder timing', object: 'clockEvent' }
        ];
    } else if (lower.includes('pto') && lower.includes('balance')) {
        aiTouchpoints = [
            'Analyzes employee work schedule and accrual rules',
            'Predicts future PTO accrual based on scheduled hours',
            'Calculates projected balance at future dates',
            'Identifies approaching cap limits or expiration deadlines',
            'Forecasts optimal time-off windows based on accrual',
            'Factors in planned time-off requests and approvals',
            'Alerts employees to use-it-or-lose-it situations',
            'Learns from employee PTO usage patterns to improve forecasts'
        ];
        flow = [
            { step: 1, actor: 'Employee', action: 'Views PTO balance in self-service portal or mobile app', object: 'ptoBalance' },
            { step: 2, actor: 'System', action: 'Retrieves current balance and accrual rules from HR system', object: 'ptoBalance' },
            { step: 3, actor: 'AI', action: 'Analyzes upcoming work schedule and accrual rate', object: 'schedule', confidence: true },
            { step: 4, actor: 'AI', action: 'Predicts future PTO accrual dates and projected balance', object: 'ptoBalance', confidence: true },
            { step: 5, actor: 'System', action: 'Displays forecast timeline with accrual milestones', object: 'ptoBalance' },
            { step: 6, actor: 'AI', action: 'Checks for approaching cap limits or expiration dates', object: 'ptoBalance', branches: true },
            { step: '6a', actor: 'System', action: 'Alerts employee: "Use 40 hours by Dec 31 or lose it"', object: 'ptoBalance', condition: 'approaching expiration' },
            { step: '6b', actor: 'System', action: 'Shows optimal windows to request time off', object: 'ptoBalance', condition: 'planning mode' },
            { step: 7, actor: 'Employee', action: 'Plans time-off requests based on forecast', object: 'ptoRequest' },
            { step: 8, actor: 'AI', action: 'Learns from employee PTO patterns to improve future forecasts', object: 'ptoBalance' }
        ];
    } else if (lower.includes('schedule') && lower.includes('prefer')) {
        aiTouchpoints = [
            'Analyzes employee past shift selections and swap requests',
            'Identifies preferred days, times, and shift patterns',
            'Learns employee availability and work-life preferences',
            'Detects shifts that match learned preference profile',
            'Monitors open shift board for matching opportunities',
            'Sends proactive notifications when preferred shifts open up',
            'Prioritizes suggestions by preference strength and availability',
            'Adapts to changing employee circumstances and preferences'
        ];
        flow = [
            { step: 1, actor: 'System', action: 'Continuously monitors open shifts and schedule changes', object: 'schedule' },
            { step: 2, actor: 'AI', action: 'Learns employee shift preferences from past picks and swaps', object: 'schedule', confidence: true },
            { step: 3, actor: 'AI', action: 'Detects new open shift that matches employee preferences', object: 'shift' },
            { step: 4, actor: 'AI', action: 'Validates employee qualifications and availability', object: 'shift', confidence: true },
            { step: 5, actor: 'System', action: 'Sends mobile notification about preferred shift opportunity', object: 'shift' },
            { step: 6, actor: 'Employee', action: 'Views shift details and match score in mobile app', object: 'shift' },
            { step: 7, actor: 'Employee', action: 'Accepts shift or dismisses suggestion', object: 'shift', branches: true },
            { step: '7a', actor: 'System', action: 'Assigns shift to employee and updates schedule', object: 'schedule', condition: 'employee accepts' },
            { step: '7b', actor: 'AI', action: 'Learns from rejection to refine preference model', object: 'schedule', condition: 'employee dismisses' },
            { step: 8, actor: 'AI', action: 'Tracks shift acceptance rate to improve suggestions', object: 'schedule' }
        ];
    } else if (industry === 'hcm') {
        // Generic HCM predictive intelligence (turnover, overtime, etc.)
        aiTouchpoints = [
            'Analyzes employee engagement, performance, and tenure data',
            'Detects behavioral changes and early warning signals',
            'Predicts turnover risk by employee segment and role',
            'Identifies key contributors and high-flight-risk employees',
            'Generates targeted retention recommendations (compensation, development)',
            'Calculates ROI of retention actions vs. replacement costs',
            'Monitors overtime trends and predicts budget impact',
            'Tracks effectiveness of interventions to refine predictions',
            'Adapts to organizational changes and market conditions'
        ];
        flow = null; // Use default flow below
    } else if (industry === 'finance') {
        aiTouchpoints = [
            'Monitors portfolio composition and concentration risks',
            'Analyzes macroeconomic indicators and market trends',
            'Predicts default probability across loan segments',
            'Identifies early warning signals in payment behavior',
            'Calculates expected losses and capital requirements',
            'Generates portfolio rebalancing recommendations',
            'Evaluates impact of interest rate and market changes',
            'Tracks prediction accuracy and model performance',
            'Adapts to changing market conditions and regulations'
        ];
    } else {
        aiTouchpoints = [
            'Cross-domain pattern detection across all data sources',
            'Time-series analysis to identify trends and trajectories',
            'Predictive modeling for future states and outcomes',
            'Anomaly identification with root cause analysis',
            'Impact quantification (cost, risk, opportunity)',
            'Recommendation generation with expected outcomes',
            'Priority scoring based on urgency and impact',
            'Continuous learning from user feedback and outcomes'
        ];
    }

    // Use custom flow if generated, otherwise use default
    const defaultFlow = [
        { step: 1, actor: 'System', action: 'Continuously monitors employee, operational, and performance data', object: 'intelligenceHub' },
        { step: 2, actor: 'AI', action: `Analyzes historical patterns to detect early warning signals`, object: 'insight', confidence: true },
        { step: 3, actor: 'AI', action: `Predicts ${predictionType} with confidence scoring`, object: 'insight' },
        { step: 4, actor: 'AI', action: recommendations, object: 'insight', confidence: true },
        { step: 5, actor: 'System', action: 'Routes based on risk severity and urgency', object: 'insight', branches: true },
        { step: '5a', actor: 'System', action: 'Sends critical alert to leadership with immediate action plan', object: 'insight', condition: criticalTrigger },
        { step: '5b', actor: 'System', action: 'Dashboard notification to managers with recommended actions', object: 'insight', condition: 'severity = warning' },
        { step: '5c', actor: 'System', action: 'Logs insight for reporting and trend analysis', object: 'insight', condition: 'severity = info' },
        { step: 6, actor: 'User', action: 'Reviews predictions and takes preventive action', object: 'insight' },
        { step: 7, actor: 'AI', action: 'Tracks outcome of actions to improve future predictions', object: 'intelligenceHub' }
    ];

    return {
        objects: objects.map(key => GENERIC_OBJECTS[key]).filter(Boolean),
        flow: flow || defaultFlow,
        aiTouchpoints,
        configurationNeeds: [
            { setting: 'Alert Thresholds', description: 'Sensitivity for each severity level', default: 'Critical: immediate risk, Warning: potential issue' },
            { setting: 'Notification Channels', description: 'How to deliver alerts', default: 'Critical: all channels, Warning: dashboard + email' },
            { setting: 'Prediction Horizon', description: 'How far ahead to forecast', default: '30-90 days' },
            { setting: 'Historical Baseline', description: 'Time period for comparison', default: '12 months rolling' },
            { setting: 'Learning Rate', description: 'Speed of AI adaptation', default: 'Medium - balance stability with responsiveness' }
        ]
    };
}

// Unified Entity View Pattern
function generateUnifiedEntityViewWorkflow(concept, objects, industry = 'generic') {
    const domainContext = getDomainContext(industry, 'unifiedView');

    let entityType, systems, flow, aiTouchpoints, workflowObjects;
    if (industry === 'hcm') {
        entityType = domainContext ? domainContext.entity : 'Employee';
        systems = domainContext ? domainContext.systems : 'Time, Payroll, Benefits, Performance';
        workflowObjects = ['employee', 'employeeProfile', 'timeEntry', 'hrInsight', 'department'].map(key => GENERIC_OBJECTS[key]).filter(Boolean);
        flow = [
            { step: 1, actor: 'Manager', action: 'Searches for employee in system', object: 'intelligenceHub' },
            { step: 2, actor: 'System', action: 'Queries Time, Payroll, Benefits, Performance, Learning systems', object: 'employeeProfile' },
            { step: 3, actor: 'AI', action: 'Aggregates employee data across all HR systems', object: 'employeeProfile', confidence: true },
            { step: 4, actor: 'AI', action: 'Analyzes attendance patterns, performance trends, benefit usage', object: 'employeeProfile' },
            { step: 5, actor: 'AI', action: 'Generates employee health score and turnover risk', object: 'hrInsight', confidence: true },
            { step: 6, actor: 'System', action: 'Renders unified employee profile with timeline', object: 'employeeProfile' },
            { step: 7, actor: 'Manager', action: 'Explores time history, compensation, performance reviews', object: 'employeeProfile' },
            { step: 8, actor: 'AI', action: 'Provides retention recommendations and development suggestions', object: 'hrInsight' }
        ];
        aiTouchpoints = [
            'Aggregates employee data from Time, Payroll, Benefits, Performance, and Learning systems',
            'Calculates employee health score based on attendance, performance, and engagement',
            'Maps manager relationships and team structure',
            'Identifies patterns in time-off requests and overtime',
            'Detects anomalies in attendance or performance trends',
            'Generates turnover risk prediction and retention insights',
            'Surfaces compensation equity analysis across similar roles',
            'Provides natural language summaries of employee career progression'
        ];
    } else if (industry === 'finance') {
        entityType = domainContext ? domainContext.entity : 'Customer';
        systems = domainContext ? domainContext.systems : 'Banking, Lending, Investments, Cards';
        workflowObjects = ['customer', 'customerProfile', 'account', 'financialInsight'].map(key => GENERIC_OBJECTS[key]).filter(Boolean);
        if (workflowObjects.length === 0) {
            // Fallback to generic objects if finance objects not defined
            workflowObjects = ['entity', 'profile', 'insight'].map(key => GENERIC_OBJECTS[key]).filter(Boolean);
        }
        flow = [
            { step: 1, actor: 'User', action: 'Searches for customer', object: 'intelligenceHub' },
            { step: 2, actor: 'System', action: 'Queries Banking, Lending, Investments, Cards systems', object: 'customerProfile' },
            { step: 3, actor: 'AI', action: 'Aggregates customer data across all financial systems', object: 'customerProfile', confidence: true },
            { step: 4, actor: 'AI', action: 'Analyzes transaction patterns, account health, credit behavior', object: 'customerProfile' },
            { step: 5, actor: 'AI', action: 'Generates customer health score and lifetime value', object: 'financialInsight', confidence: true },
            { step: 6, actor: 'System', action: 'Renders unified customer profile', object: 'customerProfile' },
            { step: 7, actor: 'User', action: 'Explores accounts, transactions, interactions', object: 'customerProfile' },
            { step: 8, actor: 'AI', action: 'Provides product recommendations and risk indicators', object: 'financialInsight' }
        ];
        aiTouchpoints = [
            'Aggregates customer data from all financial systems in real-time',
            'Calculates customer lifetime value and relationship health',
            'Maps product holdings and cross-sell opportunities',
            'Identifies patterns in spending and saving behavior',
            'Detects anomalies and fraud indicators',
            'Generates churn risk and retention insights',
            'Surfaces compliance and regulatory considerations',
            'Provides natural language summaries of financial relationships'
        ];
    } else {
        entityType = 'Entity';
        systems = 'All connected systems';
        workflowObjects = objects.map(key => GENERIC_OBJECTS[key]).filter(Boolean);
        flow = [
            { step: 1, actor: 'User', action: 'Searches for entity', object: 'intelligenceHub' },
            { step: 2, actor: 'System', action: 'Queries all connected systems', object: 'profile' },
            { step: 3, actor: 'AI', action: 'Aggregates cross-system data', object: 'profile', confidence: true },
            { step: 4, actor: 'AI', action: 'Analyzes patterns and relationships', object: 'profile' },
            { step: 5, actor: 'AI', action: 'Generates insights and health scores', object: 'insight', confidence: true },
            { step: 6, actor: 'System', action: 'Renders unified profile view', object: 'profile' },
            { step: 7, actor: 'User', action: 'Explores connections and timeline', object: 'profile' },
            { step: 8, actor: 'AI', action: 'Provides contextual recommendations', object: 'insight' }
        ];
        aiTouchpoints = [
            'Aggregates data from all connected systems in real-time',
            'Calculates health scores across multiple dimensions',
            'Maps relationships and dependencies across entities',
            'Identifies patterns in behavior and history',
            'Detects anomalies and concerning trends',
            'Generates predictive insights and risk indicators',
            'Surfaces impact analysis and recommendations',
            'Provides natural language summaries of complex relationships'
        ];
    }

    return {
        objects: workflowObjects,
        flow: flow,
        aiTouchpoints: aiTouchpoints,
        configurationNeeds: [
            { setting: 'Data Refresh Rate', description: 'How often to update intelligence', default: 'Real-time for critical, hourly for analytics' },
            { setting: 'Insight Sensitivity', description: 'Threshold for generating alerts', default: 'Medium - balance noise with coverage' },
            { setting: 'Privacy Controls', description: 'Data visibility by role', default: 'Role-based with audit logging' },
            { setting: 'System Integration', description: 'Which systems to include', default: systems },
            { setting: 'AI Confidence', description: 'Minimum confidence for predictions', default: '75% for insights, 90% for actions' }
        ]
    };
}

// Cross-System Workflow Pattern
function generateCrossSystemWorkflowWorkflow(concept, objects, industry = 'generic') {
    const lower = concept.toLowerCase();
    const domainContext = getDomainContext(industry, 'crossSystemWorkflow');

    // Determine workflow type and affected systems
    let workflowType, systems, specificFlow, specificTouchpoints;

    if (industry === 'hcm') {
        // Detect HCM-specific workflows
        if (lower.includes('onboard') || lower.includes('new hire')) {
            workflowType = 'New Hire Onboarding';
            systems = 'HRIS, Payroll, Benefits, IT (provisioning), Facilities (badge/parking)';
            specificFlow = [
                { step: 1, actor: 'HR', action: 'Initiates new hire onboarding workflow', object: 'workflow' },
                { step: 2, actor: 'AI', action: 'Analyzes role, location, start date to determine requirements', object: 'employee', confidence: true },
                { step: 3, actor: 'AI', action: 'Identifies all required systems, accounts, and access levels', object: 'workflow' },
                { step: 4, actor: 'AI', action: 'Calculates impact: IT provisioning, benefits eligibility, payroll setup', object: 'workflow', confidence: true },
                { step: 5, actor: 'AI', action: 'Generates sequenced task list with dependencies and owners', object: 'workflow' },
                { step: 6, actor: 'System', action: 'Routes approval requests to HR manager and IT manager', object: 'approval', branches: true },
                { step: '6a', actor: 'System', action: 'Creates employee record in HRIS', object: 'employee', condition: 'approved' },
                { step: '6b', actor: 'System', action: 'Enrolls in benefits with default elections', object: 'workflow', condition: 'approved' },
                { step: '6c', actor: 'System', action: 'Creates IT accounts (email, apps, hardware requests)', object: 'workflow', condition: 'approved' },
                { step: '6d', actor: 'System', action: 'Sets up payroll with tax forms and payment method', object: 'workflow', condition: 'approved' },
                { step: '6e', actor: 'System', action: 'Requests facilities access (badge, parking, keys)', object: 'workflow', condition: 'approved' },
                { step: 7, actor: 'AI', action: 'Monitors task completion and identifies blockers', object: 'workflow' },
                { step: 8, actor: 'System', action: 'Sends progress updates to hiring manager and HR', object: 'workflow' },
                { step: 9, actor: 'System', action: 'Generates Day 1 welcome packet with all credentials', object: 'workflow' }
            ];
            specificTouchpoints = [
                'Analyzes job role to determine required systems and access levels',
                'Identifies benefits eligibility based on employment type and location',
                'Calculates payroll setup requirements (tax jurisdiction, pay frequency)',
                'Determines IT provisioning needs (hardware, software, security groups)',
                'Maps facilities requirements (office location, parking, badge access)',
                'Sequences tasks based on dependencies (HRIS before Payroll, etc.)',
                'Validates all prerequisites are met before advancing workflow',
                'Tracks completion across all systems in real-time',
                'Identifies blockers and auto-escalates delays',
                'Learns from past onboarding to optimize task sequencing',
                'Adapts to location-specific and role-specific requirements'
            ];
        } else if (lower.includes('promot') || lower.includes('job change') || lower.includes('transfer')) {
            workflowType = 'Employee Promotion/Transfer';
            systems = 'HRIS, Payroll, Benefits, Performance Management, Learning, IT (access changes)';
            specificFlow = [
                { step: 1, actor: 'Manager', action: 'Initiates promotion/transfer workflow', object: 'workflow' },
                { step: 2, actor: 'AI', action: 'Analyzes current vs. new role (title, level, comp, location)', object: 'employee', confidence: true },
                { step: 3, actor: 'AI', action: 'Calculates impact on compensation, benefits, and access rights', object: 'workflow', confidence: true },
                { step: 4, actor: 'AI', action: 'Identifies affected systems and required updates', object: 'workflow' },
                { step: 5, actor: 'System', action: 'Routes approvals based on comp change and level', object: 'approval', branches: true },
                { step: '5a', actor: 'System', action: 'Requires HR approval for any promotion', object: 'approval', condition: 'level increase' },
                { step: '5b', actor: 'System', action: 'Requires senior leader approval for >10% comp increase', object: 'approval', condition: 'significant raise' },
                { step: 6, actor: 'AI', action: 'Generates task orchestration plan with effective date sequencing', object: 'workflow' },
                { step: '6a', actor: 'System', action: 'Updates HRIS with new title, manager, department', object: 'employee', condition: 'approved' },
                { step: '6b', actor: 'System', action: 'Processes compensation change in payroll system', object: 'workflow', condition: 'approved' },
                { step: '6c', actor: 'System', action: 'Adjusts benefits if eligibility changes', object: 'workflow', condition: 'approved' },
                { step: '6d', actor: 'System', action: 'Updates IT access (new security groups, tools)', object: 'workflow', condition: 'approved' },
                { step: '6e', actor: 'System', action: 'Enrolls in role-specific training programs', object: 'workflow', condition: 'approved' },
                { step: 7, actor: 'AI', action: 'Validates all changes are synchronized across systems', object: 'workflow', confidence: true },
                { step: 8, actor: 'System', action: 'Sends congratulations notification with change summary', object: 'workflow' }
            ];
            specificTouchpoints = [
                'Compares current vs. new role to identify all differences',
                'Calculates compensation impact (salary, bonus, equity changes)',
                'Determines benefits eligibility changes (if crossing thresholds)',
                'Identifies IT access changes (new tools, security groups, revoked access)',
                'Analyzes organizational impact (reporting changes, team composition)',
                'Sequences updates to prevent access gaps or payroll errors',
                'Validates approval chain based on comp increase and level change',
                'Ensures effective date synchronization across all systems',
                'Tracks completion and identifies any system update failures',
                'Learns optimal sequencing from past promotion workflows',
                'Adapts to company-specific approval policies and thresholds'
            ];
        } else if (lower.includes('terminat') || lower.includes('offboard') || lower.includes('exit')) {
            workflowType = 'Employee Termination/Offboarding';
            systems = 'HRIS, Payroll (final pay), Benefits (COBRA), IT (access revocation), Facilities';
            specificFlow = [
                { step: 1, actor: 'Manager/HR', action: 'Initiates termination workflow', object: 'workflow' },
                { step: 2, actor: 'AI', action: 'Analyzes employee status, tenure, accruals, and access', object: 'employee', confidence: true },
                { step: 3, actor: 'AI', action: 'Calculates final pay: salary, unused PTO, bonuses, deductions', object: 'workflow', confidence: true },
                { step: 4, actor: 'AI', action: 'Identifies all active access and assets to revoke/return', object: 'workflow' },
                { step: 5, actor: 'AI', action: 'Determines benefits continuation (COBRA) and retirement impacts', object: 'workflow' },
                { step: 6, actor: 'System', action: 'Routes approval and compliance validation', object: 'approval', branches: true },
                { step: '6a', actor: 'System', action: 'HR reviews termination reason and documentation', object: 'approval', condition: 'compliance check' },
                { step: '6b', actor: 'System', action: 'Legal reviews if involuntary termination', object: 'approval', condition: 'involuntary' },
                { step: 7, actor: 'AI', action: 'Generates sequenced offboarding checklist', object: 'workflow' },
                { step: '7a', actor: 'System', action: 'Schedules IT access revocation for effective date/time', object: 'workflow', condition: 'approved' },
                { step: '7b', actor: 'System', action: 'Processes final payroll with all accruals', object: 'workflow', condition: 'approved' },
                { step: '7c', actor: 'System', action: 'Initiates COBRA and benefits termination process', object: 'workflow', condition: 'approved' },
                { step: '7d', actor: 'System', action: 'Revokes badges, parking, physical access', object: 'workflow', condition: 'approved' },
                { step: '7e', actor: 'System', action: 'Triggers asset return checklist (laptop, phone, keys)', object: 'workflow', condition: 'approved' },
                { step: 8, actor: 'AI', action: 'Monitors completion and auto-escalates missing tasks', object: 'workflow' },
                { step: 9, actor: 'System', action: 'Generates compliance documentation and audit trail', object: 'workflow' }
            ];
            specificTouchpoints = [
                'Calculates final compensation (salary, PTO payout, bonuses, deductions)',
                'Identifies all system access to revoke (email, apps, VPN, badges)',
                'Determines benefits continuation requirements (COBRA notifications)',
                'Tracks company assets for return (laptop, phone, access cards)',
                'Validates compliance requirements (notice periods, documentation)',
                'Sequences tasks to prevent data access after termination',
                'Ensures final paycheck includes all accruals and deductions',
                'Generates audit trail for legal and compliance',
                'Coordinates timing across HR, IT, Payroll, Facilities',
                'Learns from past terminations to improve checklist completeness',
                'Adapts to voluntary vs. involuntary termination requirements'
            ];
        } else {
            // Generic HCM cross-system workflow
            workflowType = 'HR Workflow';
            systems = 'HRIS, Payroll, Benefits, IT, Facilities';
            specificFlow = null;
            specificTouchpoints = null;
        }
    } else if (industry === 'finance') {
        // Detect Finance-specific workflows
        if (lower.includes('account closure') || lower.includes('close account')) {
            workflowType = 'Account Closure';
            systems = 'Core Banking, Lending, Cards, Investments, CRM';
            specificFlow = [
                { step: 1, actor: 'Customer/Agent', action: 'Initiates account closure request', object: 'workflow' },
                { step: 2, actor: 'AI', action: 'Analyzes all customer relationships and linked accounts', object: 'account', confidence: true },
                { step: 3, actor: 'AI', action: 'Identifies dependencies: active loans, auto-pay, direct deposits', object: 'workflow' },
                { step: 4, actor: 'AI', action: 'Calculates final balances, interest, and fees across all accounts', object: 'workflow', confidence: true },
                { step: 5, actor: 'AI', action: 'Assesses impact: credit cards, investment accounts, loan payments', object: 'workflow' },
                { step: 6, actor: 'System', action: 'Routes for validation and retention offer', object: 'approval', branches: true },
                { step: '6a', actor: 'System', action: 'Presents retention offer if high-value customer', object: 'workflow', condition: 'valuable relationship' },
                { step: '6b', actor: 'System', action: 'Validates no active loans or obligations', object: 'workflow', condition: 'standard closure' },
                { step: 7, actor: 'AI', action: 'Generates closure orchestration plan', object: 'workflow' },
                { step: '7a', actor: 'System', action: 'Cancels recurring payments and direct deposits', object: 'workflow', condition: 'approved' },
                { step: '7b', actor: 'System', action: 'Closes linked credit cards and investment accounts', object: 'workflow', condition: 'approved' },
                { step: '7c', actor: 'System', action: 'Processes final interest calculation and fees', object: 'workflow', condition: 'approved' },
                { step: '7d', actor: 'System', action: 'Issues final disbursement (check or transfer)', object: 'workflow', condition: 'approved' },
                { step: '7e', actor: 'System', action: 'Updates CRM with closure reason and context', object: 'workflow', condition: 'approved' },
                { step: 8, actor: 'AI', action: 'Monitors completion and identifies any blockers', object: 'workflow' },
                { step: 9, actor: 'System', action: 'Sends closure confirmation with final statement', object: 'workflow' }
            ];
            specificTouchpoints = [
                'Maps all customer relationships across all product lines',
                'Identifies active loans, credit lines, and payment obligations',
                'Detects recurring payments and direct deposits to be canceled',
                'Calculates final balances including pending transactions and fees',
                'Assesses customer value and triggers retention workflow if appropriate',
                'Validates regulatory compliance for account closure',
                'Sequences closure tasks to prevent disruption to active services',
                'Ensures linked accounts (cards, investments) are handled properly',
                'Tracks disbursement of remaining funds',
                'Learns from closure reasons to improve retention strategies',
                'Adapts to different account types and regulatory requirements'
            ];
        } else {
            // Generic Finance cross-system workflow
            workflowType = 'Financial Workflow';
            systems = 'Banking, Lending, Investments, Risk Management';
            specificFlow = null;
            specificTouchpoints = null;
        }
    } else {
        workflowType = 'Cross-System Workflow';
        systems = 'Multiple Systems';
        specificFlow = null;
        specificTouchpoints = null;
    }

    // Use specific flow if available, otherwise use generic
    const flow = specificFlow || [
        { step: 1, actor: 'User', action: `Initiates ${workflowType.toLowerCase()}`, object: 'workflow' },
        { step: 2, actor: 'AI', action: 'Analyzes current state across all systems', object: 'entity', confidence: true },
        { step: 3, actor: 'AI', action: `Calculates impact across: ${systems}`, object: 'workflow', confidence: true },
        { step: 4, actor: 'System', action: 'Routes for required approvals', object: 'approval', branches: true },
        { step: '4a', actor: 'System', action: 'Updates primary system', object: 'workflow', condition: 'approved' },
        { step: '4b', actor: 'System', action: 'Propagates changes to connected systems', object: 'workflow', condition: 'approved' },
        { step: '4c', actor: 'System', action: 'Triggers downstream actions and notifications', object: 'workflow', condition: 'approved' },
        { step: 5, actor: 'AI', action: 'Generates comprehensive task orchestration plan', object: 'workflow' },
        { step: 6, actor: 'System', action: 'Orchestrates updates across all systems', object: 'workflow' },
        { step: 7, actor: 'AI', action: 'Monitors completion status in real-time', object: 'workflow' },
        { step: 8, actor: 'System', action: 'Notifies all stakeholders of completion', object: 'workflow' }
    ];

    const aiTouchpoints = specificTouchpoints || [
        'Evaluates readiness and prerequisites across all systems',
        'Validates against policies and business rules',
        'Calculates impact across all connected systems',
        'Identifies dependencies and sequencing requirements',
        'Generates comprehensive task orchestration plan',
        'Tracks completion status in real-time',
        'Handles failures with rollback capabilities',
        'Recommends optimal timing and execution strategy'
    ];

    return {
        objects: objects.map(key => GENERIC_OBJECTS[key]).filter(Boolean),
        flow,
        aiTouchpoints,
        configurationNeeds: [
            { setting: 'Approval Chain', description: 'Required approvers by complexity', default: 'Manager for simple, +Senior leader for complex' },
            { setting: 'Impact Threshold', description: 'When to flag high-impact workflows', default: 'Affects 3+ systems OR 10+ entities' },
            { setting: 'Task Automation', description: 'What executes automatically vs. manual', default: 'System updates auto, notifications manual' },
            { setting: 'Notification Rules', description: 'Who gets notified when', default: 'Stakeholders at each stage' },
            { setting: 'Rollback Policy', description: 'How to handle failures', default: 'Auto-rollback with admin alert' }
        ]
    };
}

// Natural Language Q&A Pattern
function generateNaturalLanguageQAWorkflow(concept, objects, industry = 'generic') {
    const domainContext = getDomainContext(industry, 'naturalLanguageQA');

    let capabilities;
    if (industry === 'hcm') {
        capabilities = domainContext ? domainContext.capabilities : 'Pay inquiries, PTO balance, benefits, policies';
    } else if (industry === 'finance') {
        capabilities = domainContext ? domainContext.capabilities : 'Balance inquiries, transaction history, payment scheduling';
    } else {
        capabilities = 'General information retrieval';
    }

    return {
        objects: objects.map(key => GENERIC_OBJECTS[key]).filter(Boolean),
        flow: [
            { step: 1, actor: 'User', action: 'Asks question', object: 'intelligenceHub' },
            { step: 2, actor: 'AI', action: 'Parses intent and entities', object: 'intelligenceHub' },
            { step: 3, actor: 'AI', action: 'Determines data sources', object: 'intelligenceHub' },
            { step: 4, actor: 'System', action: 'Queries relevant systems', object: 'entity' },
            { step: 5, actor: 'AI', action: 'Synthesizes answer', object: 'intelligenceHub', confidence: true },
            { step: 6, actor: 'System', action: 'Routes by confidence', object: 'intelligenceHub', branches: true },
            { step: '6a', actor: 'System', action: 'Provides direct answer', object: 'intelligenceHub', condition: 'confidence > 90%' },
            { step: '6b', actor: 'System', action: 'Asks clarifying questions', object: 'intelligenceHub', condition: 'confidence 60-90%' },
            { step: '6c', actor: 'System', action: 'Escalates to human', object: 'intelligenceHub', condition: 'confidence < 60%' },
            { step: 7, actor: 'AI', action: 'Suggests follow-ups', object: 'intelligenceHub' }
        ],
        aiTouchpoints: [
            'Natural language understanding of user questions',
            'Intent classification and entity extraction',
            'Context awareness across conversation history',
            'Multi-turn dialogue with clarifications',
            'Data retrieval from appropriate systems',
            'Answer generation with citations',
            'Confidence scoring for quality control',
            'Learning from user feedback and corrections'
        ],
        configurationNeeds: [
            { setting: 'Confidence Threshold', description: 'Minimum confidence for direct answers', default: '85% for facts, 95% for policy' },
            { setting: 'Escalation Rules', description: 'When to route to human support', default: 'Low confidence OR sensitive topics' },
            { setting: 'Context Window', description: 'Messages to remember', default: 'Last 10 messages' },
            { setting: 'Response Style', description: 'Tone and formality', default: 'Friendly but professional' },
            { setting: 'Citation Rules', description: 'When to show sources', default: 'Always for policy, optional for facts' }
        ]
    };
}

// Intelligent Search Pattern
function generateIntelligentSearchWorkflow(concept, objects, industry = 'generic') {
    return {
        objects: objects.map(key => GENERIC_OBJECTS[key]).filter(Boolean),
        flow: [
            { step: 1, actor: 'User', action: 'Enters search query', object: 'intelligenceHub' },
            { step: 2, actor: 'AI', action: 'Parses intent', object: 'intelligenceHub' },
            { step: 3, actor: 'System', action: 'Searches all systems', object: 'entity' },
            { step: 4, actor: 'AI', action: 'Ranks by relevance', object: 'intelligenceHub', confidence: true },
            { step: 5, actor: 'AI', action: 'Groups by type', object: 'intelligenceHub' },
            { step: 6, actor: 'System', action: 'Renders results', object: 'intelligenceHub' },
            { step: 7, actor: 'AI', action: 'Suggests related items', object: 'intelligenceHub' },
            { step: 8, actor: 'User', action: 'Explores results', object: 'entity' }
        ],
        aiTouchpoints: [
            'Natural language query understanding',
            'Entity recognition and type detection',
            'Cross-system indexing and search',
            'Contextual ranking based on user role and history',
            'Relationship discovery between results',
            'Semantic search beyond keywords',
            'Personalization of result priorities',
            'Learning from click-through behavior'
        ],
        configurationNeeds: [
            { setting: 'Search Scope', description: 'Which systems to include', default: 'All connected systems' },
            { setting: 'Privacy Filtering', description: 'Access control by role', default: 'Role-based with audit trail' },
            { setting: 'Result Ranking', description: 'How to prioritize results', default: 'Relevance + recency + context' },
            { setting: 'Result Grouping', description: 'How to organize results', default: 'By entity type' },
            { setting: 'Search History', description: 'Remember recent searches', default: 'Last 20 per user' }
        ]
    };
}

// Impact Analysis Pattern
function generateImpactAnalysisWorkflow(concept, objects, industry = 'generic') {
    const domainContext = getDomainContext(industry, 'impactAnalysis');

    let scenario, analysis;
    if (industry === 'hcm') {
        scenario = domainContext ? 'employee departure or organizational change' : 'organizational change';
        analysis = 'Impact on projects, coverage, knowledge transfer, morale';
    } else if (industry === 'finance') {
        scenario = domainContext ? domainContext.analysis : 'market change or policy update';
        analysis = domainContext ? domainContext.analysis : 'P&L impact, risk exposure, customer retention';
    } else {
        scenario = 'change or decision';
        analysis = 'Financial and operational impacts';
    }

    return {
        objects: objects.map(key => GENERIC_OBJECTS[key]).filter(Boolean),
        flow: [
            { step: 1, actor: 'User', action: 'Initiates scenario analysis', object: 'workflow' },
            { step: 2, actor: 'AI', action: 'Identifies affected systems', object: 'entity' },
            { step: 3, actor: 'AI', action: 'Analyzes direct impacts', object: 'insight', confidence: true },
            { step: 4, actor: 'AI', action: 'Traces cascading effects', object: 'insight' },
            { step: 5, actor: 'AI', action: 'Quantifies risks and costs', object: 'insight', confidence: true },
            { step: 6, actor: 'AI', action: 'Generates mitigation strategies', object: 'insight' },
            { step: 7, actor: 'System', action: 'Presents impact report', object: 'workflow' },
            { step: 8, actor: 'User', action: 'Reviews and plans', object: 'workflow' }
        ],
        aiTouchpoints: [
            'Entity relationship mapping and dependency analysis',
            'Direct impact identification across systems',
            'Cascading effect prediction (2nd and 3rd order)',
            'Financial quantification of impacts',
            'Timeline modeling for transitions',
            'Risk assessment and scoring',
            'Mitigation strategy recommendations',
            'Scenario comparison and optimization'
        ],
        configurationNeeds: [
            { setting: 'Analysis Depth', description: 'Degrees of separation to analyze', default: '3 levels (direct, secondary, tertiary)' },
            { setting: 'Cost Modeling', description: 'Which costs to include', default: 'All direct and indirect costs' },
            { setting: 'Risk Scoring', description: 'How to weight risk factors', default: 'Balanced across impact types' },
            { setting: 'Timeframe', description: 'Planning horizon', default: '6 months forward' },
            { setting: 'Comparison Baseline', description: 'What to compare against', default: 'Historical averages' }
        ]
    };
}

// Resource Optimization Pattern
function generateResourceOptimizationWorkflow(concept, objects, industry = 'generic') {
    return {
        objects: objects.map(key => GENERIC_OBJECTS[key]).filter(Boolean),
        flow: [
            { step: 1, actor: 'User', action: 'Initiates optimization', object: 'schedule' },
            { step: 2, actor: 'System', action: 'Gathers historical data', object: 'transaction' },
            { step: 3, actor: 'AI', action: 'Analyzes patterns', object: 'transaction' },
            { step: 4, actor: 'AI', action: 'Predicts requirements', object: 'schedule', confidence: true },
            { step: 5, actor: 'AI', action: 'Generates optimal plan', object: 'schedule' },
            { step: 6, actor: 'AI', action: 'Applies constraints', object: 'schedule' },
            { step: 7, actor: 'System', action: 'Presents draft plan', object: 'schedule' },
            { step: 8, actor: 'User', action: 'Reviews and adjusts', object: 'schedule' },
            { step: 9, actor: 'System', action: 'Publishes final plan', object: 'schedule' }
        ],
        aiTouchpoints: [
            'Analyzes historical demand patterns',
            'Identifies peak periods and variations',
            'Considers preferences and constraints',
            'Factors in skills and requirements',
            'Optimizes for multiple objectives (cost, coverage, satisfaction)',
            'Ensures compliance with rules and policies',
            'Learns from adjustments to improve future plans'
        ],
        configurationNeeds: [
            { setting: 'Historical Window', description: 'Time period to analyze', default: '12 months' },
            { setting: 'Optimization Goal', description: 'Primary objective', default: 'Balanced (cost + coverage + satisfaction)' },
            { setting: 'Constraints', description: 'Rules to enforce', default: 'Business policies and regulations' },
            { setting: 'Flexibility', description: 'Weight given to preferences', default: '30%' },
            { setting: 'Update Frequency', description: 'How often to regenerate', default: 'Weekly or on-demand' }
        ]
    };
}

// Real-Time Processing Pattern
function generateRealTimeProcessingWorkflow(concept, objects, industry = 'generic') {
    return {
        objects: objects.map(key => GENERIC_OBJECTS[key]).filter(Boolean),
        flow: [
            { step: 1, actor: 'System', action: 'Monitors cutoff time', object: 'transaction' },
            { step: 2, actor: 'System', action: 'Triggers processing', object: 'transaction' },
            { step: 3, actor: 'AI', action: 'Validates all data', object: 'transaction', confidence: true },
            { step: 4, actor: 'AI', action: 'Flags issues', object: 'anomaly' },
            { step: 5, actor: 'System', action: 'Routes flagged items', object: 'anomaly', branches: true },
            { step: '5a', actor: 'System', action: 'Auto-corrects minor issues', object: 'transaction', condition: 'high confidence' },
            { step: '5b', actor: 'System', action: 'Alerts for review', object: 'anomaly', condition: 'requires decision' },
            { step: 6, actor: 'AI', action: 'Generates summary', object: 'transaction' },
            { step: 7, actor: 'System', action: 'Sends to downstream system', object: 'transaction' },
            { step: 8, actor: 'System', action: 'Locks processed data', object: 'transaction' }
        ],
        aiTouchpoints: [
            'Validates completeness and accuracy',
            'Checks for anomalies and exceptions',
            'Calculates aggregations and totals',
            'Applies business rules and transformations',
            'Generates summary reports',
            'Flags discrepancies and issues',
            'Provides confidence scores for corrections'
        ],
        configurationNeeds: [
            { setting: 'Processing Time', description: 'When to trigger processing', default: 'Daily at specified cutoff' },
            { setting: 'Auto-Correction Rules', description: 'What AI can fix', default: 'Minor formatting only' },
            { setting: 'Validation Rules', description: 'Required checks', default: 'All completeness and compliance checks' },
            { setting: 'Summary Format', description: 'Report structure', default: 'By category + exceptions' },
            { setting: 'Exception Handling', description: 'Process for flagged items', default: 'Review required before processing' }
        ]
    };
}

// Smart Aggregation Pattern
function generateSmartAggregationWorkflow(concept, objects, industry = 'generic') {
    return {
        objects: objects.map(key => GENERIC_OBJECTS[key]).filter(Boolean),
        flow: [
            { step: 1, actor: 'System', action: 'Identifies items to aggregate', object: 'transaction' },
            { step: 2, actor: 'AI', action: 'Determines aggregation strategy', object: 'transaction', confidence: true },
            { step: 3, actor: 'System', action: 'Routes based on rules', object: 'transaction', branches: true },
            { step: '3a', actor: 'System', action: 'Aggregates with existing', object: 'transaction', condition: 'eligible for combination' },
            { step: '3b', actor: 'System', action: 'Creates separate item', object: 'transaction', condition: 'must be separate' },
            { step: 4, actor: 'AI', action: 'Validates aggregation', object: 'transaction', confidence: true },
            { step: 5, actor: 'AI', action: 'Checks for duplicates', object: 'anomaly' },
            { step: 6, actor: 'System', action: 'Calculates impact', object: 'transaction' },
            { step: 7, actor: 'System', action: 'Generates summary', object: 'transaction' },
            { step: 8, actor: 'System', action: 'Sends for processing', object: 'transaction' }
        ],
        aiTouchpoints: [
            'Identifies eligible items for aggregation',
            'Determines optimal aggregation strategy',
            'Validates aggregation logic and amounts',
            'Checks for duplicate entries',
            'Calculates net impact of aggregation',
            'Ensures compliance with timing rules',
            'Flags high-value items for review'
        ],
        configurationNeeds: [
            { setting: 'Aggregation Strategy', description: 'Default behavior', default: 'Combine when eligible' },
            { setting: 'Eligibility Window', description: 'Time period to consider for combining', default: 'Current processing period' },
            { setting: 'Approval Threshold', description: 'Value requiring manual approval', default: 'Organization-defined limit' },
            { setting: 'Duplicate Detection', description: 'Lookback period', default: '90 days' },
            { setting: 'Timing Rules', description: 'Deadline for aggregation vs. separate', default: 'Based on processing cutoff' }
        ]
    };
}

// Generic fallback
function generateGenericWorkflow(concept, objects, industry = 'generic') {
    return {
        objects: objects.map(key => GENERIC_OBJECTS[key]).filter(Boolean),
        flow: [
            { step: 1, actor: 'User', action: 'Initiates action', object: objects[0] || 'entity' },
            { step: 2, actor: 'System', action: 'Gathers context', object: objects[0] || 'entity' },
            { step: 3, actor: 'AI', action: 'Analyzes and processes', object: objects[0] || 'entity', confidence: true },
            { step: 4, actor: 'AI', action: 'Generates recommendation', object: 'insight' },
            { step: 5, actor: 'System', action: 'Presents to user', object: 'insight' },
            { step: 6, actor: 'User', action: 'Reviews and decides', object: objects[0] || 'entity' }
        ],
        aiTouchpoints: [
            'Analyzes patterns in historical data',
            'Applies business rules and policies',
            'Generates insights and recommendations',
            'Provides confidence scoring',
            'Enables user override and feedback',
            'Learns from user actions'
        ],
        configurationNeeds: [
            { setting: 'Confidence Threshold', description: 'Minimum confidence for AI actions', default: '85%' },
            { setting: 'Notification Rules', description: 'Who gets notified when', default: 'Standard notification policy' },
            { setting: 'Approval Chain', description: 'Required approvers', default: 'Manager approval' }
        ]
    };
}